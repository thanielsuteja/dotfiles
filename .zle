bindkey -v

export VISUAL='nvim'
export EDITOR='nvim'
# switch modes qwicker
export KEYTIMEOUT=10

autoload -Uz compinit && compinit

# PLUGINS -- {{
source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh
source ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source ~/.zsh/zsh-history-substring-search/zsh-history-substring-search.zsh
# }}

# KEY BINDINGS -- {{{
autoload -U edit-command-line
zle -N edit-command-line 
bindkey -M vicmd 'R' edit-command-line

bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey -M vicmd '^P' history-substring-search-up
bindkey -M vicmd '^N' history-substring-search-down

bindkey -M vicmd 'K' history-search-backward
bindkey -M vicmd 'J' history-search-forward

bindkey -M viins '' vi-add-eol
bindkey -M viins '' backward-delete-char
# bindkey -M viins '' backward-delete-word
bindkey -M viins '' backward-kill-line
# bindkey -M vicmd Y vi-yank-eol

bindkey -M viins '^P' insert-last-word
# bindkey -M viins '^N' copy-next-word

# binds <C-o> to the '!!' command
bindkey -s '^G' "!!"

# continue suspended process
bindkey -s '^Z' "fg"

# }}}

# GIT STATUS -- {{
setopt prompt_subst

autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git 
zstyle ':vcs_info:*' stagedstr 'A' 
zstyle ':vcs_info:*' unstagedstr 'U' 
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' actionformats '%F{5}[%F{2}%b%F{3}|%F{1}%a%F{5}]%f '
zstyle ':vcs_info:*' formats \
      '%F{2}%c%F{3}%u %F{5}[%F{2}%b%F{5}]%f'
zstyle ':vcs_info:git*+set-message:*' hooks git-untracked

+vi-git-untracked() {
  if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && \
        [[ $(git ls-files --other --directory --exclude-standard | sed q | wc -l | tr -d ' ') == 1 ]] ; then
    hook_com[unstaged]+='%F{1}?%f'
  fi
}

precmd () { vcs_info }
# }}

# zmodload zsh/complist
# bindkey -M menuselect 'h' vi-backward-char
# bindkey -M menuselect 'k' vi-up-line-or-history
# bindkey -M menuselect 'l' vi-forward-char
# bindkey -M menuselect 'j' vi-down-line-or-history

## CURSOR MODE -- {{{
# See https://ttssh2.osdn.jp/manual/4/en/usage/tips/vim.html for cursors
cursor_block='\e[2 q'
cursor_beam='\e[6 q'

function zle-keymap-select {
    if [[ ${KEYMAP} == vicmd ]] ||
        [[ $1 = 'block' ]]; then
        echo -ne $cursor_block
    elif [[ ${KEYMAP} == main ]] ||
        [[ ${KEYMAP} == viins ]] ||
        [[ ${KEYMAP} = '' ]] ||
        [[ $1 = 'beam' ]]; then
        echo -ne $cursor_beam
    fi
}

zle-line-init() {
    echo -ne $cursor_beam
}

zle -N zle-keymap-select
zle -N zle-line-init
# }}}

# TEXT OBJECTS -- {{{
autoload -Uz select-bracketed select-quoted
zle -N select-quoted
zle -N select-bracketed
for km in viopp visual; do
    bindkey -M $km -- '-' vi-up-line-or-history
    for c in {a,i}${(s..)^:-\'\"\`\|,./:;=+@}; do
        bindkey -M $km $c select-quoted
    done
    for c in {a,i}${(s..)^:-'()[]{}<>bB'}; do
        bindkey -M $km $c select-bracketed
    done
done
# }}}

# SURROUND  -- {{{
autoload -Uz surround
zle -N delete-surround surround
zle -N add-surround surround
zle -N change-surround surround
bindkey -M vicmd cs change-surround
bindkey -M vicmd ds delete-surround
bindkey -M vicmd ys add-surround
bindkey -M visual S add-surround
# }}}

